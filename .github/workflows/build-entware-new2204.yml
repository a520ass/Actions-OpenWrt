
name: Build Entware Use Ubuntu 2204

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
      repo_url:
        description: 'REPO URL'
        required: true
        default: 'https://github.com/Entware/Entware'
      repo_branch:
        description: 'REPO BRANCH'
        required: true
        default: 'master'
      patch_version:
        description: 'PATCH VERSION'
        required: true
        default: 'master'
      config_file:
        description: 'CONFIG FILE'
        required: true
        default: 'armv7-3.2.config'
      entware_prefix:
        description: 'entware_prefix'
        required: true
        default: '/mnt/jffs2/app/opt'

env:
  REPO_URL: ${{ inputs.repo_url }}
  REPO_BRANCH: ${{ inputs.repo_branch }}
  PATCH_VERSION: ${{ inputs.patch_version }}
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ${{ inputs.config_file }}
  ENTWARE_PREFIX: ${{ inputs.entware_prefix }}
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_WSS: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential ccache ecj fastjar file g++ gawk gettext git java-propose-classpath libelf-dev libncurses5-dev libncursesw5-dev libssl-dev python2 python2.7-dev python3 unzip wget python3-distutils python3-setuptools python3-dev rsync subversion swig time xsltproc zlib1g-dev  patchutils
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH Entware
          ln -sf /workdir/Entware $GITHUB_WORKSPACE/Entware

      - name: Update feeds
        run: cd Entware && make package/symlinks

      - name: Load custom configuration And mod /opt
        run: |
          cd Entware
          cp -iv configs/$CONFIG_FILE .config
          cd -
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE Entware/.config
          cd Entware
          grep '/opt' -rl --exclude-dir=".git" . | xargs sed -i "s|/opt\>|${ENTWARE_PREFIX}|g"

      - name: Restore cached 
        id: cache-openwrt-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            Entware/build_dir
            Entware/staging_dir
            Entware/tools
            Entware/toolchain
            Entware/tmp
          key: Entware-${{ env.REPO_BRANCH }}-${{ env.CONFIG_FILE }}-${{ env.ENTWARE_PREFIX }}

      - name: start frpc
        uses: a520ass/frpc_action@main
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        with:
          users: ${{ inputs.users || github.actor }}
          run_daemon: true
          authorized_keys: ${{ secrets.AUTHORIZED_KEYS }}
          host_key: ${{ secrets.HOST_KEY }}
          config: ${{ secrets.FRPC_SERVER_CONF }}

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Compile the firmware
        id: compile
        run: |
          cd Entware
          echo -e "$(nproc) thread compile"	
          make -j$(nproc) tools/install || make -j1 tools/install V=s
          make -j$(nproc) toolchain/install || make -j1 toolchain/install V=s
          make -j$(nproc) target/compile || make -j1 target/compile V=s
          
          # 单独编译 make -j$(nproc) package/compile
          make -j$(nproc) package/opkg/compile
          make -j$(nproc) package/busybox/compile
          make -j$(nproc) package/entware-opt/compile
          make -j$(nproc) package/dropbear/compile
          
          echo "::set-output name=status::success"
          echo "DEVICE_NAME=_NEW" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Save cached 
        id: cache-openwrt-save
        uses: actions/cache/save@v4
        if: steps.cache-openwrt-restore.outputs.cache-hit != 'true' && steps.compile.outputs.status == 'success' && !cancelled()
        with:
          path: |
            Entware/build_dir
            Entware/staging_dir
            Entware/tools
            Entware/toolchain
            Entware/tmp
          key: Entware-${{ env.REPO_BRANCH }}-${{ env.CONFIG_FILE }}-${{ env.ENTWARE_PREFIX }}

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: Entware_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: Entware/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd Entware
          tar -czf bin.tar.gz bin
          echo "FIRMWARE=$PWD/bin" >> $GITHUB_ENV
          echo "::set-output name=status::success"

      - name: Upload firmware to Wenshushu
        id: wenshushu
        if: steps.organize.outputs.status == 'success' && env.UPLOAD_WSS == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wss -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wenshushu.log
          echo "::warning file=wenshushu.com::$(cat wenshushu.log | grep https)"
          echo "::set-output name=url::$(cat wenshushu.log | grep Download | grep https | cut -f3 -d" ")"

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          touch release.txt
          [ $UPLOAD_WSS = true ] && echo "🔗 [Wenshushu](${{ steps.wenshushu.outputs.url }})" >> release.txt
          echo "自定义构建参数" >> release.txt
          echo "REPO_URL: $REPO_URL" >> release.txt
          echo "REPO_BRANCH: $REPO_BRANCH" >> release.txt
          echo "PATCH_VERSION: $PATCH_VERSION" >> release.txt
          echo "FEEDS_CONF: $FEEDS_CONF" >> release.txt
          echo "CONFIG_FILE: $CONFIG_FILE" >> release.txt
          echo "::set-output name=status::success"

      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*
